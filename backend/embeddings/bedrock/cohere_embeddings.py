import json
import logging
import os
from typing import Optional, List, Union

import boto3
from botocore.exceptions import ClientError
from dotenv import load_dotenv

# MongoDB dependencies
from pymongo import MongoClient
import pymongo

load_dotenv()

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BedrockCohereEnglishEmbeddings:
    """ A class to generate text embeddings using the Cohere Embed English model with MongoDB integration. """

    log: logging.Logger = logging.getLogger("BedrockCohereEnglishEmbeddings")

    def __init__(self, 
                 aws_access_key: Optional[str] = None, 
                 aws_secret_key: Optional[str] = None,
                 region_name: Optional[str] = "us-east-1", 
                 model_id: Optional[str] = "cohere.embed-english-v3",
                 mongodb_uri: Optional[str] = None,
                 database_name: Optional[str] = None) -> None:
        """
        Initialize the BedrockCohereEnglishEmbeddings class.
        
        Args:
            aws_access_key (str): The AWS access key.
            aws_secret_key (str): The AWS secret key.
            region_name (str): The AWS region name.
            model_id (str): The model ID to use. Only accepts Cohere Embed English models.
            mongodb_uri (str): MongoDB connection URI.
            database_name (str): Name of the MongoDB database.
        """
        # AWS Bedrock client setup
        self.aws_access_key = aws_access_key or os.getenv("AWS_ACCESS_KEY_ID")
        self.aws_secret_key = aws_secret_key or os.getenv("AWS_SECRET_ACCESS_KEY")
        self.region_name = region_name or os.getenv("AWS_REGION", "us-east-1")
        
        self.model_id = model_id
        
        # Create Bedrock client
        self.bedrock_client = boto3.client(
            'bedrock-runtime',
            aws_access_key_id=self.aws_access_key,
            aws_secret_access_key=self.aws_secret_key,
            region_name=self.region_name
        )
        
        # MongoDB setup
        self.mongodb_uri = mongodb_uri or os.getenv("MONGODB_URI")
        self.database_name = database_name or os.getenv("DATABASE_NAME")
        
        self.client = None
        self.db = None
        
        # Establish MongoDB connection
        if self.mongodb_uri and self.database_name:
            try:
                self.client = MongoClient(self.mongodb_uri)
                self.db = self.client[self.database_name]
                logger.info(f"Successfully connected to MongoDB database: {self.database_name}")
            except Exception as e:
                logger.error(f"Failed to connect to MongoDB: {str(e)}")

    def generate_text_embeddings(self, body):
        """
        Generate text embedding by using the Cohere Embed model.
        
        Args:
            body (str): The request body to use.
        Returns:
            dict: The response from the model.
        """
        accept = '*/*'
        content_type = 'application/json'

        response = self.bedrock_client.invoke_model(
            body=body,
            modelId=self.model_id,
            accept=accept,
            contentType=content_type
        )

        return response

    def predict(self, text: str):
        """ 
        Predict text embeddings based on the input text. 

        Args:
            text (str): The input text to generate embeddings for.

        Returns:
            list: The text embeddings generated by the model.
        """
        input_type = "search_document"
        embedding_types = ["float"]

        try:
            body = json.dumps({
                "texts": [text],
                "input_type": input_type,
                "embedding_types": embedding_types}
            )
            response = self.generate_text_embeddings(body=body)
            # Extract the response embeddings
            response_embeddings = json.loads(response['body'].read())[
                "embeddings"]["float"][0]

            return response_embeddings
        except ClientError as err:
            message = err.response["Error"]["Message"]
            self.log.error("A client error occurred: %s", message)
            return None

    def embed_mongodb_collection(self, 
                                 collection_name: str, 
                                 field_to_embed: str, 
                                 embedding_field: str = 'embedding',
                                 batch_size: int = 100,
                                 query: Optional[dict] = None):
        """
        Generate embeddings for a specified field in a MongoDB collection.
        
        Args:
            collection_name (str): Name of the MongoDB collection.
            field_to_embed (str): Name of the field to generate embeddings for.
            embedding_field (str, optional): Name of the field to store embeddings. 
                                             Defaults to 'embedding'.
            batch_size (int, optional): Number of documents to process in each batch. 
                                        Defaults to 100.
            query (dict, optional): Additional MongoDB query to filter documents.
        
        Returns:
            int: Number of documents processed and updated.
        """
        # Validate MongoDB connection
        if self.client is None or self.db is None:
            raise ValueError("MongoDB connection not initialized. Provide valid MongoDB URI and database name.")
        
        try:
            # Get the collection
            collection = self.db[collection_name]
            
            # Construct query to find documents without embeddings
            base_query = {
                embedding_field: {'$exists': False},
                field_to_embed: {'$exists': True, '$ne': ''}
            }
            
            # Merge with additional query if provided
            if query:
                base_query.update(query)
            
            # Find documents
            total_documents = collection.count_documents(base_query)
            self.log.info(f"Total documents to process: {total_documents}")
            
            processed_count = 0
            
            # Process documents in batches
            for batch_start in range(0, total_documents, batch_size):
                documents = list(collection.find(base_query).skip(batch_start).limit(batch_size))
                
                for doc in documents:
                    try:
                        # Ensure the field exists and is not empty
                        if field_to_embed not in doc or not doc[field_to_embed]:
                            continue
                        
                        # Generate embedding for the specified field
                        embedding = self.predict(str(doc[field_to_embed]))
                        
                        if embedding:
                            # Update the document with the embedding
                            collection.update_one(
                                {'_id': doc['_id']},
                                {'$set': {embedding_field: embedding}}
                            )
                            processed_count += 1
                            
                            self.log.info(f"Processed document {doc['_id']}")
                    except Exception as e:
                        self.log.error(f"Error processing document {doc.get('_id', 'Unknown')}: {str(e)}")
            
            self.log.info(f"Embedding process completed. Processed {processed_count} documents.")
            return processed_count
        
        except Exception as e:
            self.log.error(f"Error in embed_mongodb_collection: {str(e)}")
            raise

    def close_connection(self):
        """
        Closes the MongoDB client connection if it exists.
        """
        if self.client:
            self.client.close()
            self.log.info("MongoDB connection closed.")

# Example usage
if __name__ == '__main__':
    # Initialize the embeddings generator
    try:
        embeddings = BedrockCohereEnglishEmbeddings()

        # Example of embedding a field in a collection
        processed = embeddings.embed_mongodb_collection(
            collection_name='policy', 
            field_to_embed='description',  # Field to generate embeddings for
            embedding_field='descriptionEmbedding'  # Where to store the embeddings
        )
        print(f"Processed {processed} documents")
    
    except Exception as e:
        print(f"An error occurred: {str(e)}")
    
    finally:
        # Ensure connection is closed
        embeddings.close_connection()